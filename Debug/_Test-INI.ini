# Informations the cool GUI will show
[ToolInfo]
# Title=<string>                    The title FEMDAQ will show within its title-bar
# Operator=<string>                 The name of the operator is printed to the status-bar
# Description=<string>              The description is printed to the status-bar
# Comment=<string>                  This is just for you
Title=FEMDAQ
Operator=haum
Description=Test for new feature (sub-interval measurements)
Comment=

# Other tool-settings
[ToolSettings]
# SaveResultsGrouped=<bool>         Should each save grouped into a newly created folder (named after a timestamp)
SaveResultsGrouped=true

# Information for a auto-load sweepfile
[SweepInfo]
# StartupSweep=<string>             Can be an absolute or relative (to FEMDAQ.exe) path to a sweepfile which is the automatically loaded after the ini
StartupSweep=

# Timing-Informations
[Timing]
# Initial=<uint>                    Cycle-duration for the first/initial step when starting a measurement in [ms]
# Iterative=<uint>                  Cycle-duration for all other steps expect the first one in [ms]
# Comment=<string>                  This is just for you
Initial=6000
Iterative=6000
Comment=



# KE6485 provides as drawnOver: DevXY
#  returns always 0 (has no source)
[Dev14|KE6485]
#---------------- General settings ----------------
# GpibAddr=<uint>, <uint>, <uint>   GPIB-Adress:        GPIB-Adapter, Primary-Adress, Secondary-Adress
#                                    Possible adresses: 0,            14,             0
# CustomName=<string>               Saved outputfile contains <string> in it's filename, otherwise the file gets a standard-filename
# Comment=<string>                  This is just for you
GpibAddr=0, 14, 0
CustomName=
Comment=
#---------------- Measurement ----------------
# MeasureInstantly=<int>            Measurement @ <int> = -1 (disabled), 0 (@CycleEnd), 1 (CycleStart)
# nSubMeasurements=<uint>           Takes n Measurment points per global interval (see [Timing]).
#                                    <uint> = 0 or 1:   One datapoint
#                                    <uint> >= 2:       Multiple datapoints
#                                    !!! NOTE !!!
#                                     This feature works properly for devices of a multi-device-communication.
#                                     GPIB will therefore only work properly with one GPIB-device! (GPIB-Devices
#                                     measured in series by one single thread due to incapability of multi-device-communication)
# deltatimeSubmeasurements=<uint>   The interval between submeasurements [ms]
#                                    !!! NOTE !!!       nSubMeasurements * deltatimeSubmeasurements <= GlobalInterval      (see [Timing])
# Range=<double>                    Measurment-Range: <double> = 20e-12 ... 20e-3 [A] (in decades!); Not sure about min-value
# Nplc=<double>                     Integrationtime in NetPowerLineCycles: <double> = 0 ... 20 (* 1/50Hz) [ms]; not sure about the double and min/max value
# ZeroCheck=<bool>                  Connect measurementchannel to reference resistor: <bool> = true/false
# AutoZero=<bool>                   Offsetcorrection: <bool> = true/false;
MeasureInstantly=0
nSubMeasurements=4
deltatimeSubmeasurements=1000
Range=20e-3
Nplc=5
ZeroCheck=false
AutoZero=true
#---------------- DataPlot ----------------
# ChartIdentifier=Chart<int>        Plots data to Chart<int> (can have multiple entries separated by ",")
# ChartDrawnOver=<drawnOverSpecs>   Plots over: <drawnOver> = Time or check device-blocks for supported specifier; MUST have same or more entries as ChartIdentifier
# ChartColor=<color>                Plots in color: <color> = check _ColorTable; MUST have same or more entries as ChartIdentifier
#                                                   Good visible is: black, blue, brown, Green, Orange, Plum, Red, Purple
ChartIdentifier=Chart1, Chart2
ChartDrawnOver=Time, Dev1000
ChartColor=orange, orange





# DmySU provides as drawnOver: DevXY
#  where the result is always its last SourceNode-value from the connected sweep-file
[Dev1000|DmySU]
#---------------- General settings ----------------
# CustomName=<string>               Saved outputfile contains <string> in it's filename, otherwise the file gets a standard-filename
# Comment=<string>                  This is just for you
CustomName=DSU
Comment=
#---------------- SourceControl ----------------
# SourceNode=<int>                  Source is connected to headercolumn "U<int>"; -1 disables the source
SourceNode=1000




# Chart-Blocks
[Chart1|Timechart]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Time [s]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=0|0
XAxisLogBase=0
YAxisLogBase=1
ShowLegend=1

[Chart2|U_CF vs. CC]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Voltage [V]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=0|0
XAxisLogBase=0
YAxisLogBase=1
ShowLegend=1



[Chart3|U_DRP vs. CC]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Voltage [V]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=0|0
XAxisLogBase=0
YAxisLogBase=1
ShowLegend=1



